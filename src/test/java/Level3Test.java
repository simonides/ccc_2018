/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import at.perses.contest.Image;
import at.perses.contest.Match;
import at.perses.io.FileInput;
import at.perses.io.FileOutput;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

public class Level3Test {
    private static final Logger logger = LogManager.getLogger(Level3Test.class.getName());

    private String inPath =  "resources/level3/lvl3-5.inp";
    private String outPath = "resources/level3/lvl3-5.out";

    private FileInput input;
    private FileOutput output;

    @Before
    public void setUp() throws IOException {
        input = new FileInput(inPath);
        output = new FileOutput(outPath);
        logger.info("Setup done");
    }

    @After
    public void tearDown() throws IOException {
        logger.info("Tear down...");
        output.close();
        input.close();
    }



    List<Image> images = new ArrayList<Image>();

    Image getImageAtTimestamp(int timestamp){
        for (Image img : images){
            if (img.timestamp == timestamp){
                return img;
            }
        }
        return null;
    }

    @Test
    public void exec() throws IOException {
        String firstLine = input.readLine();
        String[] strings = firstLine.split(" ");
        int start = Integer.parseInt(strings[0]);
        int end = Integer.parseInt(strings[1]);
        int numberOfImages = Integer.parseInt(strings[2]);


        for (int i = 0; i < numberOfImages; i++) {

            images.add(new Image(input).clip());
        }

        //noinspection Duplicates


        images = images.stream().sorted(Comparator.comparingInt(o2 -> o2.timestamp)
        ).filter(o -> o.hasAsteroid()).collect(Collectors.toList());

        List<Match> matches = new ArrayList<>();
        List<Integer> consumedImages = new ArrayList<>();

        for (Image image : images) {
            if (consumedImages.contains(image.timestamp)){
                continue;
            }
            System.out.print(image.timestamp + ":");

            Match match = new Match(image);


            for(Image other :images){
                if (other == image){
                    continue;
                }
                if(image.compareMono(other)){

                    int timediff = other.timestamp - image.timestamp;
                    boolean cantMatch = false;

                    // zukunft
                    for (int t = other.timestamp+ timediff; t <= end; t+= timediff){
                        Image expected = getImageAtTimestamp(t);
                        if (expected == null || !expected.compareMono(other)) {
                            cantMatch = true;
                            break;
                        }
                    }
                    // vergangenheit
                    for (int t = image.timestamp - timediff; t >=start; t-= timediff){
                        Image expected = getImageAtTimestamp(t);
                        if (expected == null || !expected.compareMono(other)) {
                            cantMatch = true;
                            break;
                        }
                    }
                    if(cantMatch){
                        continue;
                    }
                    if(match.timeDiff == 0){
                        match.timeDiff = timediff;
                    }else{
                        if(((other.timestamp - image.timestamp) % match.timeDiff) != 0){
                            System.out.println("[" +other.timestamp + "<>" + image.timestamp + "]");
                            cantMatch = true;
                        }
                    }

                    if(cantMatch){
                        continue;
                    }
                    match.matchCount++;
                    match.lastOccurence = other.timestamp;
                    consumedImages.add(other.timestamp);
                    System.out.print(other.timestamp + "(" + match.timeDiff + ") ");
                }
            }
            matches.add(match);
            System.out.print("\n");
        }

        for (Match match : matches){
            output.writeLine(""+match.firstOccurence + " " + match.lastOccurence + " " +match.matchCount);
        }

        System.out.println(matches);
    }

}

